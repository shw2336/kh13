<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="member">

	<!-- 
		조회
		- 기본검색(type, keyword)
		- 복합검색
		- 계층형검색
	 -->
	 
	<select id="list" resultType="MemberDto">
		select * from member
	</select>
	
	<!--
		column은 정적배치이므로 $ 사용, keyword는 동적배치이므로 # 사용  
	 -->
	<select id="search" resultType="MemberDto">
		select * from member where instr(${column}, #{keyword}) > 0
		order by ${column} asc, member_id asc
	</select>
	
	<!-- 
		column, keyword 유무에 따라 목록 또는 검색을 실행
		mybatis 조건식에는 && 대신 and, || 대신 or을 사용한다 
	-->
	<select id="listOrSearch" resultType="MemberDto">
		select * from member
		<if test="column != null and keyword != null">
		where instr(${column}, #{keyword}) > 0
		order by ${column} asc, member_id asc
		</if>
	</select>
	
	<!-- 
		복잡한 검색(complex search)
		- 테이블의 각 항목별로 특징에 맞게 검색하도록 구현
		- 유사검색, 일치검색, 구간검색 중 적절한 것을 선택
	 -->
	<select id="complex" resultType="MemberDto">
		<!-- top n query header 삽입 -->
		<include refid="top-n-header"></include>
	
		select * from member
		
		<!-- 조건 -->
		<where>
			<!-- 아이디(시작검사) -->
			<if test="memberId != null">
				and member_id like #{memberId} || '%'
			</if>
			<!-- 닉네임(포함검사) -->
			<if test="memberNick != null">
				and instr(member_nick, #{memberNick}) > 0
			</if>
			<!-- 연락처(일치검사) -->
			<if test="memberContact != null">
				and member_contact = #{memberContact} 
			</if>
			<!-- 포인트(구간검사) -->
			<choose>
				<when test="minPoint != null and maxPoint != null">
					and member_point between #{minPoint} and #{maxPoint}
				</when>
				<when test="minPoint != null">
					<!-- 
					XML에서 불가능한 글자를 사용할 경우 
					CDATA 
					영역을 만들어 해결 
					-->
					<![CDATA[
					and member_point >= #{minPoint}
					]]>
				</when>
				<when test="maxPoint != null">
					<![CDATA[
					and member_point <= #{maxPoint}
					]]>
				</when>
			</choose>
			
			<!-- 
			(Q) YYYY-MM-DD 형식의 날짜로 
			가입일 검색 (memberJoin) 
			-->
			<if test="memberJoin != null">
				and to_char(member_join, 'YYYY-MM-DD') = #{memberJoin}
			</if>
			
			<!-- 
			(Q) YYYY-MM-DD 형식의 날짜 2개로 
			로그인 일자 검색 (minLoginDate, maxLoginDate)
			* minLoginDate는 0시 0분 0초로 설정해야 하고
			* maxLoginDate는 23시 59분 59초로 설정해야 한다 
			-->
			<choose>
				<when test="minLoginDate != null and maxLoginDate != null">
				and member_login is not null 
				and
				member_login between 
				to_date(#{minLoginDate} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS') 
				and 
				to_date(#{maxLoginDate} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				</when>
				<when test="minLoginDate != null">
				<![CDATA[
				and member_login is not null
				and member_login >=
				to_date(#{minLoginDate} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
				<when test="maxLoginDate != null">
				<![CDATA[
				and member_login is not null
				and member_login <= 
				to_date(#{maxLoginDate} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				]]> 
				</when>
			</choose>
			
			<!-- 회원등급 - 여러 개 선택 가능하도록 구현 (memberLevelList) -->
			<if test="memberLevelList != null and memberLevelList.size() > 0">
			and member_level in 
			<foreach collection="memberLevelList" item="memberLevel"
						open="(" separator="," close=")">
				#{memberLevel}
			</foreach>			
			</if>
		</where>
		
		<!-- 
			정렬
			- 사용자가 원하는 순서에 맞게 정렬하도록 구현
			- 여러개 있을 수 있다는 전제조건 하에 구현
			- 넘어오는 데이터의 이름은 orderList로 설정
			- List.of("member_id asc", "member_nick desc", ...)
		-->
		<choose>
			<when test="orderList != null and orderList.size() > 0">
				order by 
				<foreach collection="orderList" item="orderItem"
								separator=",">
					${orderItem}
				</foreach>
			</when>
			<otherwise>
				order by member_id asc
			</otherwise>
		</choose>
		
		<!-- top n query footer 삽입 -->
		<include refid="top-n-footer"></include>
	</select>
	
	<!-- 
		Top N Query 적용
		- 결국 홈페이지의 목록에는 페이징이라는 개념이 포함된다
		- 어떻게 구현하느냐에 따라서 네비게이터나 무한스크롤 형태가 됨
		- 모든 조회에 똑같이 들어가는 구문이므로 어딘가에 보관해두고 불러온다면?
	 -->
	<!-- 상단 -->
	<sql id="top-n-header">
		<if test="beginRow != null and endRow != null">
		select * from (
			select rownum rn, TMP.* from (
		</if>
	</sql>
	
	<!-- 하단 -->
	<sql id="top-n-footer">
		<if test="beginRow != null and endRow != null">
			)TMP
		) where rn between #{beginRow} and #{endRow}
		</if>
	</sql>

</mapper>